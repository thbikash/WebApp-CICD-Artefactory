name: Node.js CI Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Use your desired Node.js version

    - name: Install dependencies (for CI testing/linting)
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Create Lean Build Tarball (Source Code Only)
      shell: bash
      run: |
        mkdir -p output
        mkdir -p staging

        # Copy all files and directories EXCEPT node_modules, .git, .github, etc.
        # This requires careful use of rsync or find/cp with exclusions.
        # rsync is generally more robust for this. Make sure rsync is available on runner.
        # It's usually pre-installed on ubuntu-latest.

        rsync -av \
          --exclude='node_modules/' \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='.gitignore' \
          --exclude='*.env' \
          --exclude='output/' \
          --exclude='staging/' \
          . staging/ # Copy everything from current dir to staging/

        # Now, create the tarball from the staging directory
        tar -czvf output/webapp-${{ github.run_number }}.tar.gz -C staging .

        echo "Listing contents of staging directory before tar:"
        ls -lR staging/ # List recursively to see all files
        echo "Size of staging directory:"
        du -sh staging/ # Check the size

        # Clean up staging directory
        rm -rf staging

        echo "Contents of output directory:" # Debugging line
        ls -l output/                      # Debugging line

        

    - name: Upload .tar.gz artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp-artifact # Use a consistent name, run_id is handled by download step
        path: output/webapp-${{ github.run_number }}.tar.gz
        retention-days: 1 # How long to keep the artifact in GitHub Actions

    - name: Build success
      run: echo "âœ… Build complete. Artifact 'webapp-artifact' uploaded."